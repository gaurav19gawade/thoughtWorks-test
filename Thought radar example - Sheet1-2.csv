name,ring,quadrant,isNew,description
Four key metrics,Adopt,Techniques,FALSE,"<p>To measure software delivery performance, more and more organizations are turning to the <strong>four key metrics</strong> as defined by the <a href=""https://www.devops-research.com/"">DORA research</a> program: change lead time, deployment frequency, mean time to restore (MTTR) and change fail percentage. This research and its statistical analysis have shown a clear link between high delivery performance and these metrics; they provide a great leading indicator for how a team, or even a whole delivery organization, is doing.</p>

<p>We're still big proponents of these metrics, but we've also learned some lessons since we first started monitoring them. And we're increasingly seeing misguided measurement approaches with tools that help teams measure these metrics based purely on their continuous delivery (CD) pipelines. In particular when it comes to the stability metrics (MTTR and change fail percentage), CD pipeline data alone doesn't provide enough information to determine what a deployment failure with real user impact is. Stability metrics only make sense if they include data about real incidents that degrade service for the users.</p>

<p>And as with all metrics, we recommend to always keep in mind the ultimate intention behind a measurement and use them to reflect and learn. For example, before spending weeks to build up sophisticated dashboard tooling, consider just regularly taking the <a href=""https://www.devops-research.com/quickcheck.html"">DORA quick check</a> in team retrospectives. This gives the team the opportunity to reflect on which <a href=""https://www.devops-research.com/research.html#capabilities"">capabilities</a> they could work on to improve their metrics, which can be much more effective than overdetailed out-of-the-box tooling.</p>"
Platform engineering product teams,Adopt,Techniques,FALSE,"<p>We continue to see <strong>platform engineering product teams</strong> as a sensible default with the key insight being that they're just another <a href=""https://martinfowler.com/articles/products-over-projects.html"">product team</a>, albeit one focused on internal platform customers. Thus it is critical to have clearly defined customers and products while using the same engineering disciplines and ways of working as any other (externally focused) product team; platform teams aren't special in this regard. We strongly caution against just renaming existing internal teams ""platform teams"" while leaving ways of working and organizational structures unchanged. We're still big fans of using concepts from <a href=""https://teamtopologies.com/"">Team Topologies</a> as we think about how best to organize platform teams. We consider platform engineering product teams to be a standard approach and a significant enabler for high-performing IT.</p>"
Zero trust architecture,Adopt,Techniques,FALSE,"<p>We keep hearing about enterprises finding their security badly compromised due to an overreliance on the ""secure"" network perimeter. Once this external perimeter is breached, internal systems prove to be poorly protected with attackers quickly and easily able to deploy automated data extraction tools and ransomware attacks that all too often remain undetected for long periods. This leads us to recommend <strong>zero trust architecture</strong> (ZTA) as a now sensible default.</p>

<p>ZTA is a paradigm shift in security architecture and strategy. Itâ€™s based on the assumption that a network perimeter is no longer representative of a secure boundary and no implicit trust should be granted to users or services based solely on their physical or network location. The number of resources, tools and platforms available to implement aspects of ZTA keeps growing and includes enforcing <a href=""/radar/techniques/security-policy-as-code"">policies as code</a> based on the least privilege and as-granular-as-possible principles and continuous monitoring and automated mitigation of threats; using <a href=""/radar/techniques/service-mesh"">service mesh</a> to enforce security control application-to-service and service-to-service; implementing <a href=""/radar/techniques/binary-attestation"">binary attestation</a> to verify the origin of the binaries; and including <a href=""/radar/techniques/secure-enclaves"">secure enclaves</a> in addition to traditional encryption to enforce the three pillars of data security: in transit, at rest and in memory. For introductions to the topic, consult the <a href=""https://csrc.nist.gov/publications/detail/sp/800-207/final"">NIST ZTA</a> publication and Google's white paper on <a href=""https://cloud.google.com/security/beyondprod"">BeyondProd</a>.</p>"